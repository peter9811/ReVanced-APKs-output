name: Build Releases
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ -n "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.json
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_ENV

      - name: Build modules/APKs
        run: if [ -f "config.json" ]; then ./build.sh config.json; else ./build.sh config.toml; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ env.NEXT_VER_CODE }}

      - name: Get output
        id: get_output
        run: |
          if [ ! -f build.md ]; then
            echo "::error::build.md file not generated"
            exit 1
          fi
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Check for build output
        run: |
          if [ ! -d "./build" ] || [ -z "$(ls -A ./build)" ]; then
            echo "::error::Build directory is empty or doesn't exist"
            exit 1
          fi

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: |
            # ReVanced Build ${{ env.NEXT_VER_CODE }}

            ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced Build ${{ env.NEXT_VER_CODE }}
          tag: ${{ env.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update 2>/dev/null || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ env.NEXT_VER_CODE }},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/${{ github.repository }}/update/build.md\"
          }"
          }

          if [ ! -d "./build" ]; then
            echo "::warning::Build folder not found during update json creation"
            touch dummy-update.json
            exit 0
          fi

          cd build
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop 2>/dev/null) || continue
            UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson || echo "")
            [ -z "$UPDATE_JSON" ] && continue
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version= | cut -d= -f2)
            [ -z "$VER" ] && continue
            DLURL="$GITHUB_SERVER_URL/${{ github.repository }}/releases/download/${{ env.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || touch dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ env.NEXT_VER_CODE }}

      - name: Report to Telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
        if: env.TG_TOKEN != null
        run: |
          if [ ! -d "./build" ]; then
            echo "::warning::Build folder not found during Telegram reporting"
            exit 0
          fi

          cd build

          TG_CHAT="@rvc_magisk"
          NL=$'\n'
          APKS=""
          MODULES=""
          for OUTPUT in *; do
            DL_URL="$GITHUB_SERVER_URL/${{ github.repository }}/releases/download/${{ env.NEXT_VER_CODE }}/${OUTPUT}"
            if [[ $OUTPUT = *.apk ]]; then
              APKS+="${NL}ðŸ“¦[${OUTPUT}](${DL_URL})"
            elif [[ $OUTPUT = *.zip ]]; then
              MODULES+="${NL}ðŸ“¦[${OUTPUT}](${DL_URL})"
            fi
          done
          MODULES=${MODULES#"$NL"}
          APKS=${APKS#"$NL"}

          BODY="$(sed 's/^\* \*\*/â†ª \*\*/g; s/^\* `/â†ª \*\*/g; s/`/\*/g; s/^\* /\â†ª/g; s/\*\*/\*/g; s/###//g; s/^- /â†ª /g; /^==/d;' ../build.md)"
          MSG="*New build! Version ${{ env.NEXT_VER_CODE }}*

          ${BODY}

          *â–¼ Download Links:*
          Modules:
          ${MODULES}

          APKs:
          ${APKS}
          "
          echo "'$MSG'"
          MSG=${MSG:0:9450}
          POST="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          curl -s -X POST --data-urlencode "parse_mode=Markdown" --data-urlencode "disable_web_page_preview=true" --data-urlencode "text=${MSG}" --data-urlencode "chat_id=${TG_CHAT}" "$POST" || echo "::warning::Failed to send Telegram message"
